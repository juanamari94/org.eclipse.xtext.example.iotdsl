/*
 * generated by Xtext 2.9.0.v201507170721
 */
package org.xtext.example.mydsl.validation
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.iotdsl.Device
import org.xtext.example.mydsl.iotdsl.IotdslPackage

//import org.eclipse.xtext.validation.Check
/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IotdslValidator extends AbstractIotdslValidator {

  public static val INVALID_NAME = 'invalidName'

	@Check
	def checkGreetingStartsWithCapital(Device device) {
		if (!Character.isUpperCase(device.name.charAt(0))) {
			warning('Name should start with a capital', 
					IotdslPackage.Literals.DEVICE__NAME,
					INVALID_NAME)
		}
	}
	@Check
	def checkNoCycleInEntityHierarchy(Device entity) {
		if (entity.superType == null)
			return // nothing to check
		val visitedEntities = <Device>newHashSet()
		visitedEntities.add(entity)
		var current = entity.superType
		while (current != null) {
			if (visitedEntities.contains(current)) {
				error("cycle in hierarchy of entity '" + current.name + "'",
					IotdslPackage::eINSTANCE.device_SuperType)
				return
			}
			visitedEntities.add(current)
			current = current.superType
		}
	}

}
