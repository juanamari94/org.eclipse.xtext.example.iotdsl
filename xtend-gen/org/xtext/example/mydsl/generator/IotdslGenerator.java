/**
 * generated by Xtext 2.9.0.v201507170721
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.iotdsl.Action;
import org.xtext.example.mydsl.iotdsl.Attribute;
import org.xtext.example.mydsl.iotdsl.BoolConstant;
import org.xtext.example.mydsl.iotdsl.Device;
import org.xtext.example.mydsl.iotdsl.Event;
import org.xtext.example.mydsl.iotdsl.Expression;
import org.xtext.example.mydsl.iotdsl.IntConstant;
import org.xtext.example.mydsl.iotdsl.State;
import org.xtext.example.mydsl.iotdsl.StringConstant;
import org.xtext.example.mydsl.iotdsl.Transition;
import org.xtext.example.mydsl.iotdsl.Variable;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IotdslGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Device> _filter = Iterables.<Device>filter(_iterable, Device.class);
    for (final Device d : _filter) {
      {
        String _name = d.getName();
        String _plus = ("devices/" + _name);
        String _plus_1 = (_plus + ".java");
        CharSequence _compile = this.compile(d);
        fsa.generateFile(_plus_1, _compile);
        String _name_1 = d.getName();
        String _plus_2 = ("devices/" + _name_1);
        String _plus_3 = (_plus_2 + "SP/states/");
        String _name_2 = d.getName();
        String _plus_4 = (_plus_3 + _name_2);
        String _plus_5 = (_plus_4 + "Int.java");
        CharSequence _compileInterface = this.compileInterface(d);
        fsa.generateFile(_plus_5, _compileInterface);
        EList<State> _states = d.getStates();
        for (final State state : _states) {
          String _name_3 = d.getName();
          String _plus_6 = ("devices/" + _name_3);
          String _plus_7 = (_plus_6 + "SP/states/");
          String _name_4 = state.getName();
          String _plus_8 = (_plus_7 + _name_4);
          String _plus_9 = (_plus_8 + ".java");
          CharSequence _compileState = this.compileState(state, d);
          fsa.generateFile(_plus_9, _compileState);
        }
      }
    }
  }
  
  public CharSequence compile(final Device device) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package devices;");
    _builder.newLine();
    _builder.append("import devices.");
    String _name = device.getName();
    _builder.append(_name, "");
    _builder.append("SP.states.*;\t");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_1 = device.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    {
      Device _superType = device.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append(" extends ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Device _superType_1 = device.getSuperType();
        String _name_2 = _superType_1.getName();
        _builder.append(_name_2, "\t");
        _builder.append(" ");
      }
    }
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static String deviceTag = \"");
    Attribute _attributes = device.getAttributes();
    String _tag = _attributes.getTag();
    _builder.append(_tag, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_3 = device.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Int actualState;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private enum Event");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Event> _events = device.getEvents();
      int _size = _events.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          EList<Event> _events_1 = device.getEvents();
          int _size_1 = _events_1.size();
          int _minus = (_size_1 - 1);
          IntegerRange _upTo = new IntegerRange(1, _minus);
          for(final Integer i : _upTo) {
            _builder.append("\t\t");
            EList<Event> _events_2 = device.getEvents();
            Event _get = _events_2.get(((i).intValue() - 1));
            String _name_4 = _get.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append(",");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        EList<Event> _events_3 = device.getEvents();
        Event _last = IterableExtensions.<Event>last(_events_3);
        String _name_5 = _last.getName();
        _builder.append(_name_5, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setState(");
    String _name_6 = device.getName();
    _builder.append(_name_6, "\t");
    _builder.append("Int state)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.actualState = state;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"incomplete-switch\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run(Event e)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(e){");
    _builder.newLine();
    {
      EList<Transition> _transitions = device.getTransitions();
      for(final Transition tra : _transitions) {
        _builder.append("\t\t");
        _builder.append("case ");
        Event _event = tra.getEvent();
        String _name_7 = _event.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("this.setState(new ");
        State _state = tra.getState();
        String _name_8 = _state.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileState(final State state, final Device device) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package devices.");
    String _name = device.getName();
    _builder.append(_name, "");
    _builder.append("SP.states;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = state.getName();
    _builder.append(_name_1, "");
    _builder.append(" implements ");
    String _name_2 = device.getName();
    _builder.append(_name_2, "");
    _builder.append("Int");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_3 = state.getName();
    _builder.append(_name_3, "\t");
    _builder.append("(){}");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public void handle()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Action> _elements = state.getElements();
      for(final Action element : _elements) {
        {
          if ((element instanceof Variable)) {
            {
              Expression _expression = ((Variable)element).getExpression();
              if ((_expression instanceof IntConstant)) {
                _builder.append("\t\t");
                _builder.append("int ");
                String _name_4 = ((Variable)element).getName();
                _builder.append(_name_4, "\t\t");
                _builder.append(" = ");
                Expression _expression_1 = ((Variable)element).getExpression();
                int _value = ((IntConstant) _expression_1).getValue();
                _builder.append(_value, "\t\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _expression_2 = ((Variable)element).getExpression();
              if ((_expression_2 instanceof StringConstant)) {
                _builder.append("\t\t");
                _builder.append("String ");
                String _name_5 = ((Variable)element).getName();
                _builder.append(_name_5, "\t\t");
                _builder.append(" = \"");
                Expression _expression_3 = ((Variable)element).getExpression();
                String _value_1 = ((StringConstant) _expression_3).getValue();
                _builder.append(_value_1, "\t\t");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _expression_4 = ((Variable)element).getExpression();
              if ((_expression_4 instanceof BoolConstant)) {
                _builder.append("\t\t");
                _builder.append("boolean ");
                String _name_6 = ((Variable)element).getName();
                _builder.append(_name_6, "\t\t");
                _builder.append(" = ");
                Expression _expression_5 = ((Variable)element).getExpression();
                String _value_2 = ((BoolConstant) _expression_5).getValue();
                _builder.append(_value_2, "\t\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileInterface(final Device device) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package devices.");
    String _name = device.getName();
    _builder.append(_name, "");
    _builder.append("SP.states;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _name_1 = device.getName();
    _builder.append(_name_1, "");
    _builder.append("Int");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract void handle();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
