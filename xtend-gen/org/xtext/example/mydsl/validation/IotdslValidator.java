/**
 * generated by Xtext 2.9.0.v201507170721
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import java.util.HashSet;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.xtext.example.mydsl.iotdsl.Device;
import org.xtext.example.mydsl.iotdsl.IotdslPackage;
import org.xtext.example.mydsl.validation.AbstractIotdslValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class IotdslValidator extends AbstractIotdslValidator {
  public final static String INVALID_NAME = "invalidName";
  
  @Check
  public void checkGreetingStartsWithCapital(final Device device) {
    String _name = device.getName();
    char _charAt = _name.charAt(0);
    boolean _isUpperCase = Character.isUpperCase(_charAt);
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Name should start with a capital", 
        IotdslPackage.Literals.DEVICE__NAME, 
        IotdslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkNoCycleInEntityHierarchy(final Device entity) {
    Device _superType = entity.getSuperType();
    boolean _equals = Objects.equal(_superType, null);
    if (_equals) {
      return;
    }
    final HashSet<Device> visitedEntities = CollectionLiterals.<Device>newHashSet();
    visitedEntities.add(entity);
    Device current = entity.getSuperType();
    while ((!Objects.equal(current, null))) {
      {
        boolean _contains = visitedEntities.contains(current);
        if (_contains) {
          String _name = current.getName();
          String _plus = ("cycle in hierarchy of entity \'" + _name);
          String _plus_1 = (_plus + "\'");
          EReference _device_SuperType = IotdslPackage.eINSTANCE.getDevice_SuperType();
          this.error(_plus_1, _device_SuperType);
          return;
        }
        visitedEntities.add(current);
        Device _superType_1 = current.getSuperType();
        current = _superType_1;
      }
    }
  }
}
